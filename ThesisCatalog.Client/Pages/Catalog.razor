@page "/"
@using ThesisCatalog.Core.Entities
@using ThesisCatalog.Client.Services
@using ThesisCatalog.Client.Components.Viewer
@inject CatalogService CatalogService
@inject IDialogService DialogService
@inject ILogger<Catalog> Logger
<PageTitle>Catalog</PageTitle>

    <FluentToolbar>
        <FluentButton IconStart="@(new Icons.Regular.Size20.New())"
                      @onclick="DisplayCreateItemPanel">
            Create Item
        </FluentButton>
    </FluentToolbar>
<FluentGrid>
    <FluentGridItem>
        <FluentDataGrid
            @ref="@_catalogItemGrid"
            ItemsProvider="@_catalogItemsProvider"
            ItemKey="item => item.Id"
            GridTemplateColumns="0.5fr 0.5fr 1fr 1fr 0.5fr 0.5fr 1fr">
            <ChildContent>
                <PropertyColumn Property="@(item => item.Memory.ToString())" Title="Memory" Align="Align.End"/>
                <PropertyColumn Property="@(item => item.StorageSpecification.ToString())" Title="Storage" Align="Align.End"/>
                <PropertyColumn Property="@(item => item.UsbSpecification.ToString())" Title="USB Ports"/>
                <PropertyColumn Property="@(item => item.GpuDescriptor.ToString())" Title="Graphics"/>
                <PropertyColumn Property="@(item => item.PsuRating)" Title="PSU Watts" Align="Align.End"/>
                <PropertyColumn Property="@(item => item.Weight.ToString())" Title="Weight" Align="Align.End"/>
                <PropertyColumn Property="@(item => item.CpuDescriptor.ToString())" Title="CPU"/>
                <TemplateColumn>
                    <FluentButton IconStart="@(new Icons.Regular.Size20.Edit())" @onclick="() => DisplaySelectedItemPanel(context)"/>
                    <FluentButton IconStart="@(new Icons.Regular.Size20.Delete())" @onclick="() => DisplayDeleteItemConfirmation(context)" />
                </TemplateColumn>
            </ChildContent>
            <EmptyContent>
                <p>No catalog items were found.</p>
            </EmptyContent>

        </FluentDataGrid>
    </FluentGridItem>
    </FluentGrid>

@code {
    private Dictionary<int, ComputerCatalogItem> AllCatalogItems { get; set; } = new();
    private IQueryable<ComputerCatalogItem>? DisplayCatalogItems { get; set; }
    private ComputerCatalogItem? PanelCatalogItem { get; set; }
    private FluentDataGrid<ComputerCatalogItem> _catalogItemGrid = null!;
    
    GridItemsProvider<ComputerCatalogItem> _catalogItemsProvider = default!;

    private IDialogReference? _dialog;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        _catalogItemsProvider = async req =>
        {
            using var logScope = Logger.BeginScope("Getting catalog items from API");
            var itemsDictionary = await CatalogService.GetAllCatalogItemsAsync();
            var items = itemsDictionary.Values.ToList();
            Logger.LogInformation("{catalogItemCount} items found", items.Count);
            return GridItemsProviderResult.From(items, items.Count);
        };
        
        var manufacturers = await CatalogService.GetAllComponentManufacturersAsync();
        StateHasChanged();
    }

    private async Task DisplayCreateItemPanel()
    {
        Logger.LogInformation("Showing panel for new catalog item");
        var newItem = new ComputerCatalogItem
        {
            CpuDescriptor = new ComponentDescriptor(),
            GpuDescriptor = new ComponentDescriptor(),
            Memory = new MemorySpecification((int)8, StorageUnit.GB),
            StorageSpecification = new StorageSpecification((int)1, StorageUnit.TB, StorageType.SSD),
            PsuRating = 500,
            Weight = new Weight(350, WeightUnit.Grams),
            UsbSpecification = new UsbSpecification(new Dictionary<UsbType, short>
            {
                { UsbType.USB3, 4 },
                { UsbType.USBC, 4 }
            })
        };
        var dialogParameters = new DialogParameters<ComputerCatalogItem>
        {
            Title = $"Create catalog item",
            Alignment = HorizontalAlignment.Right,
            PrimaryAction = "Save Changes",
            SecondaryActionEnabled = false
        };

        _dialog = await DialogService.ShowPanelAsync<ComputerCatalogItemDialog>(newItem, dialogParameters);
        DialogResult result = await _dialog.Result;
        await HandlePanel(result, false);
        
    }

    private async Task DisplayDeleteItemConfirmation(ComputerCatalogItem selectedItem)
    {
        Logger.LogInformation("Showing delete confirmation for catalog item id {itemId}", selectedItem.Id);
        var confirmationMessage =
            $@"""
            This will delete the catalog item {selectedItem.Id} with the following components:
            CPU: {selectedItem.CpuDescriptor},
            GPU: {selectedItem.GpuDescriptor},
            Memory: {selectedItem.Memory},
            Storage: {selectedItem.StorageSpecification}
            """;
        _dialog = await DialogService.ShowConfirmationAsync(confirmationMessage,
            $"Delete this item",
            "Cancel",
            "Delete this item?");
        var result = await _dialog.Result;

        if (!result.Cancelled)
        {
            await CatalogService.DeleteCatalogItem(selectedItem);
            await _catalogItemGrid.RefreshDataAsync();
        }
    }
    
    private async Task DisplaySelectedItemPanel(ComputerCatalogItem selectedItem)
    {
        Logger.LogInformation("Showing panel for catalog item id {itemId}", selectedItem.Id);
        var dialogParameters = new DialogParameters<ComputerCatalogItem>
        {
            Title = $"Edit Catalog Item {selectedItem.Id}",
            Alignment = HorizontalAlignment.Right,
            PrimaryAction = "Save Changes",
            SecondaryActionEnabled = false
        };

        _dialog = await DialogService.ShowPanelAsync<ComputerCatalogItemDialog>(selectedItem, dialogParameters);
        DialogResult result = await _dialog.Result;
        await HandlePanel(result);
    }

    private async Task HandlePanel(DialogResult result, bool isEditing = true)
    {
        if (result.Cancelled)
        {
            Logger.LogInformation("Panel processing canceled");
            return;
        }

        if (result.Data is not ComputerCatalogItem editedCatalogItem)
        {
            Logger.LogError("Panel returned an incompatible item");
            return;
        }

        if (isEditing)
        {
            await CatalogService.PutEditedCatalogItem(editedCatalogItem);
        }
        else
        {
            await CatalogService.PostCreatedCatalogItem(editedCatalogItem);
        }

        await _catalogItemGrid.RefreshDataAsync();
    }
}