@using ThesisCatalog.Core.Entities
<FluentStack Orientation="Orientation.Horizontal">
    <FluentNumberField
        @bind-Value="StorageDisplayBytesValue"
        @bind-Value:after="MemorySpecificationChangedHandler"
        Placeholder="8"
        Size="1"/>
    <FluentSelect TOption="string"
                  @bind-Value="StorageDisplayUnitString"
                  @bind-Value:after="MemorySpecificationChangedHandler"
                  Width="6em">
        @foreach (var storageUnit in Enum.GetValues<StorageUnit>())
        {
            <FluentOption Value="@storageUnit.ToString()">
                @storageUnit.ToString()
            </FluentOption>
        }
    </FluentSelect>
</FluentStack>
@code {

    [Parameter]
    public MemorySpecification? MemorySpecification { get; set; }
    
    [Parameter]
    public EventCallback<MemorySpecification> MemorySpecificationChanged { get; set; }
    
    protected int StorageDisplayBytesValue { get; set; }
    private string StorageDisplayUnitString { get; set; } = StorageUnit.GB.ToString();

    protected override void OnParametersSet()
    {
        if (MemorySpecification is null) return;
        StorageDisplayBytesValue = MemorySpecification.DisplayQuantity;
        StorageDisplayUnitString = MemorySpecification.DisplayUnit.ToString();
    }

    private async Task MemorySpecificationChangedHandler()
    {
        var result = new MemorySpecification(StorageDisplayBytesValue, Enum.Parse<StorageUnit>(StorageDisplayUnitString));
        await MemorySpecificationChanged.InvokeAsync(result);
    }
}