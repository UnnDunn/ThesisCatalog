@using ThesisCatalog.Core.Entities
@using BindAttributes = Microsoft.FluentUI.AspNetCore.Components.BindAttributes
<FluentStack Orientation="Orientation.Horizontal">
    <FluentNumberField @bind-Value="StorageDisplayBytesValue" 
                       @bind-Value:after="StorageSpecificationChangedHandler" Size="4"/>
    <FluentSelect TOption="string" 
                  @bind-Value="@StorageDisplayUnit"
                  @bind-Value:after="StorageSpecificationChangedHandler"
                  Width="6em">
        @foreach (var storageUnit in Enum.GetValues<StorageUnit>())
        {
            <FluentOption Value="@storageUnit.ToString()">@storageUnit.ToString()</FluentOption>
        }
    </FluentSelect>
    <FluentSelect TOption="string"
                  @bind-Value="StorageTypeString"
                  @bind-Value:after="StorageSpecificationChangedHandler"
                  Width="6em">
        @foreach (var storageType in Enum.GetValues<StorageType>())
        {
            <FluentOption Value="@storageType.ToString()">
                @storageType.ToString()
            </FluentOption>
        }
    </FluentSelect>
</FluentStack>

@code {
    [Parameter] public StorageSpecification? StorageSpecification { get; set; }
    [Parameter] public EventCallback<StorageSpecification> StorageSpecificationChanged { get; set; }
    
    private int StorageDisplayBytesValue { get; set; }
    private string StorageDisplayUnit { get; set; } = StorageUnit.GB.ToString();
    private string StorageTypeString { get; set; } = StorageType.SSD.ToString();

    protected override void OnParametersSet()
    {
        if (StorageSpecification is null) return;
        StorageDisplayBytesValue = StorageSpecification.DisplayQuantity;
        StorageDisplayUnit = StorageSpecification.DisplayUnit.ToString();
        StorageTypeString = StorageSpecification.StorageType.ToString();
    }


    private async Task StorageSpecificationChangedHandler()
    {
        var result = new StorageSpecification(StorageDisplayBytesValue,
            Enum.Parse<StorageUnit>(StorageDisplayUnit),
            Enum.Parse<StorageType>(StorageTypeString));

        await StorageSpecificationChanged.InvokeAsync(result);
    }
}